{-# LANGUAGE PatternSynonyms #-}
{-# OPTIONS_GHC -funbox-strict-fields #-}

-- | Module:    Database.PostgreSQL.Protocol.Types
-- Description: Protocol data types
-- Copyright:   (c) 2015 Patryk Zadarnowski <pat@jantar.org>
-- License:     BSD3
-- Maintainer:  pat@jantar.org
-- Stability:   experimental
-- Portability: portable
--
-- This module defines the format of all messages exchanged between a PostgreSQL backend (i.e., server)
-- and frontend (i.e., client.)
--
-- At this level of abstraction, we try to restrict decoding of messages to their outermost structure,
-- retaining most message fields in their original binary encoding, usually directly as fixed-width
-- numeric types from "Data.Int" and "Data.Word". Variable-width field types are represented by
-- strict byte strings when the field tends to be atomic in nature (e.g., names) or lazy byte
-- strings for fields that exhibit further internal structure likely to require further decoding
-- in higher layers (e.g., query strings and table cell values.)

module Database.PostgreSQL.Protocol.Types where

import Data.ByteString (ByteString)
import Data.Int
import Data.Word

import qualified Data.ByteString.Lazy as LazyByteString


-- * Session Messages

-- | The type of the three session startup messages sent by a PostgreSQL frontend to the backend
--   to initiate a new database connection. These messages use an encoding incompatible with any
--   other message types, and therefore can only ever appear as the very first message posted
--   on a new socket connection to the backend.
data SessionMessage =

  -- | A message of the form “@'StartupMessage' m n ps@” requests initiation of a new database
  --   connection using protocol with major version @m@ and minor version @n@, optionally
  --   setting session parameters @ps@ to the specified default values. Besides the usual set
  --   of server configuration parameters that can be configured at runtime using the SQL @SET@
  --   command, 'StartupMessage' accepts the following three session-specific parameters:
  --
  --   * @user@, the database user name used to use,
  --   * @database@, the target database, and
  --   * @options@, command-line arguments for the backend.
  --
  --   The @user@ parameter is mandatory, but the other two may be omitted, defaulting to
  --   a database with the same name as the @user@ and an empty set of command-line arguments.
  --   In addition, the use of @options@ parameter has been deprecated in favour of setting
  --   individual run-time parameters.
  --
  --   The major and minor protocol version should be always set to
  --   'Database.PostgreSQL.Protocol.Version.currentMajorVersion' and
  --   'Database.PostgreSQL.Protocol.Version.currentMinorVersion', respectively,
  --   since PostgreSQL does not maintain backward compatibility between releases
  --   of its protocol, and the current version (3.0) is the only version guaranteed
  --   to be supported by this library.
  StartupMessage {
    startupMessage'MajorVersion :: !Word16, -- ^ major protocol version; should be 'Database.PostgreSQL.Protocol.Version.currentMajorVersion'
    startupMessage'MinorVersion :: !Word16, -- ^ minor protocol version; should be 'Database.PostgreSQL.Protocol.Version.currentMinorVersion'
    startupMessage'Parameters :: [(Name, LazyByteString)] -- ^ list of session parameters
  } |

  -- | A message of the form “@'CancelRequest' pid s@” requests cancellation of a query
  --   currently being executed on the server by another backend process with the process
  --   ID @pid@. In order to demonstrate authority to interact with this backend process,
  --   the frontend must include in the message the 32-bit secret @s@, that was previously
  --   generated by the  backend process and supplied to the frontend in a 'BackendKeyData'
  --   message as part of the session establishment protocol at the start of the targeted
  --   communication session.
  CancelRequest {
    cancelRequest'Process :: !ProcessID, -- ^ the process ID of the target backend
    cancelRequest'Secret :: !Word32 -- ^ the secret provided by backend in 'BackendKeyData' message
  } |

  -- | Requests establishment of an SSL-protected communication session.
  --   The server should respond with an 'SSLResponse' message described below.
  SSLRequest

  deriving (Eq, Ord, Read, Show)

-- | The type of a special-case response to an 'SSLRequest' message described above.
data SSLResponse =

  -- | Indicates to the frontend that the backend has accepted the 'SSLRequest'. The frontend
  --   should perform a standard SSL startup handshake as per SSL Specification and, if successful,
  --   proceed to send the usual 'StartupMessage' or 'CancelRequest' over the newly-established
  --   SSL channel.
  SSLRequestAccepted |

  -- | Indicates to the frontend that the backend has rejected the 'SSLRequest'. The frontend
  --   has an option of abandoning the connection by closing the underlying socket, or proceeding
  --   with an unencrypted session by sending the usual 'StartupMessage' or 'CancelRequest' over
  --   the same socket without encryption.
  SSLRequestRejected |

  -- | Indicates to the frontend that the backend does not understand 'SSLRequest' messages.
  --   This would only occur if the server predates the addition of SSL support to PostgreSQL.
  --   Such servers are now very ancient, and likely do not exist in the wild anymore. In this
  --   case the connection must be closed, but the frontend might choose to open another, fresh
  --   connection and proceed without requesting SSL. The notice returned by the backend is
  --   unlikely to continue meaningful error information and should most likely be ignored.
  SSLRequestFailed {
    sslRequestFailed'NoticeFields :: [(NoticeFieldTag, LazyByteString)]
  }

  deriving (Eq, Ord, Show)


-- * Frontend Messages

-- | The type of messages sent by frontend to a PostgreSQL backend or server.
--   These are the messages tagged with ‘@F@’ in Chapter 49 of PostgreSQL documentation,
--   with exception of the 'CancelRequest', 'StartupMessage' and 'SSLRequest' message types,
--   which are defined separately as 'SessionMessage' values.
data FrontendMessage =

  -- | Sent by a frontend in response to an 'AuthenticationRequest' message with
  --   data appropriate to the authentication method requested by the backend.
  --   In Chapter 49 of the PostgreSQL manual, this is documented as an array
  --   of individual message types, but, since these cannot be distinguished
  --   by the backend without knowledge of the original 'AuthenticationRequest'
  --   to which the message is responding, we represent all authentication
  --   responses as a single, unparsed message type.
  --   'AuthenticationMessage' constructor to simplify processing.
  AuthenticationResponse {
    authenticationResponse'Data :: LazyByteString -- ^ actual authentication data
  } |

  -- | A message of the form “@'Bind' p s pfs pvs rfs@” requests /binding/ (i.e., creation)
  --   of a new portal @p@ to an existing parsed statement @s@, with parameter formats @pfs@,
  --   parameter values @pvs@ and result formats @rfs@. The default /unnamed portal/ and/or
  --   /unnamed statement/ can be selected by setting @p@ and/or @s@ to an empty byte string
  --   ('Data.ByteString.empty').
  --
  --   The @pvs@ list must provide a field value (possibly 'Nothing' for SQL @NULL@) for
  --   every actual parameter mentioned in the SQL command @s@ using the @?@ or @$/n/@ syntax.
  --   Each of these values can be encoded in either the default textual or binary transfer
  --   format (both are represented in @Value@ as simple byte strings) and the actual
  --   choice of the format is determined by the @pfs@ list. The @pfs@ list can be empty
  --   (indicating that all parameters are encoded using the default textual format),
  --   singleton (indicating that all parameters are encoded using the same explicitly
  --   specified format) or else must have the same length as the @pvs@ list, specifying
  --   the transfer formats individually for each parameter value.
  --
  --   Likewise, the @rfs@ list, which determines the transfer formats expected by the
  --   frontend for any result values returned by the backend, can be left empty, requesting
  --   the backend to use the default textual encoding of all result values), specified
  --   as a singleton list (requesting the same encoding for all result fields), or
  --   else match the number of columns in the result set, thus specifying an individual
  --   format for each column.
  Bind {
    bind'Portal :: Name, -- ^ name of a new portal to create; can be 'ByteString.empty'
    bind'Statement :: Name, -- ^ name of an existing parsed statement to bind to the new portal;
    bind'parameterFormats :: [Format], -- ^ zero or more parameter formats
    bind'parameterValues :: [Maybe LazyByteString], -- ^ zero or more parameter values
    bind'resultFormats :: [Format] -- ^ zero or more result formats
  } |

  -- | A message of the form “@'Close' k x@” requests that the session object @x@
  --   of type @k@ (either a 'Statement' created by the 'Parse' message, or a 'Portal'
  --   created with 'Bind') is no longer required, and that its underlying resources
  --   should  be released  by the server for other uses.
  Close {
    close'Type :: SessionObjectType, -- ^ type of entity to close; either 'Statement' or 'Portal'
    close'Name :: Name -- ^ name of the entity to close
  } |

  -- | Transmits a chunk of a @COPY@ data string from the frontend to the backend.
  --   The actual format of the stream data is determined by the user as part of the
  --   requesting @COPY@ command and communicated by the backend back to the frontend
  --   in the 'CopyInResponse', 'CopyOutResponse' or 'CopyBothResponse' message that
  --   heralds commencement of the @COPY@ subprotocol session.
  --
  --   By convention, backends are expected to send complete data rows in a 'CopyOutData'
  --   message, but frontends are allowed to divide stream data into chunks arbitrarily
  --   without regard of data row boundaries.
  CopyInData {
    copyInData'Payload :: LazyByteString -- ^ chunk of data transmitted in this message
  } |

  -- | Sent after the final 'CopyInData' message of a given @COPY@ subprotocol session,
  --   indicates successful completion of an entire @COPY@ data stream.
  CopyInDone |

  -- | A message of the form “@'CopyInFail' msg@” should be sent by the frontend to indicate
  --   inability to supply the required @COPY@ data stream. The byte string @msg@ should
  --   provide a human-readable description of the exact error condition behind the failure.
  CopyInFail {
    copyInFail'Message :: LazyByteString -- ^ human-readable description of the error condition behind failure
  } |

  -- | A message of the form “@'Describe' k x@” requests that the backend provide details about
  --   the session object @x@ of type @k@ (either a 'Statement' created by the 'Parse' message,
  --   or a 'Portal' created with 'Bind'.) The backend should respond with a 'ParameterDescription'
  --   or 'RowDescription' message for statement and portal objects, respectively.
  Describe {
    describe'Type :: SessionObjectType, -- ^ type of entity to describe; either 'Statement' or 'Portal'
    describe'Name :: Name -- ^ name of the entity to describe
  } |

  -- | A message of the form “@'Execute' p n@” requests execution of a bound portal @p@.
  --   If @n@ is greater than zero and @p@ represents an SQL query, at most @n@ data rows
  --   should be returned by the backend; otherwise, the @n@ parameter is ignored and all data
  --   rows should be returned. If @p@ returns a row set and @n@ is negative, the results are
  --   left unspecified by the protocol.
  Execute {
    execute'Portal :: Name, -- ^ name of the portal to execute; can be 'ByteString.empty'
    execute'MaxRows :: !Word32 -- ^ maximum number of query rows to return; 0 for unlimited
  } |

  -- | Indicates that the backend should immediately return any pending command result data.
  Flush |

  -- | A message of the form “@'FunctionCall' oid afs avs rf@” requests execution of
  --   a PostgreSQL function with the given object ID @oid@, supplying it a list of
  --   argument values @avs@ encoded in the transfer format specified by the list @afs@,
  --   and expecting the function's sole result value to be encoded using the transfer
  --   format @rf@. As for 'Bind' messages, @afs@ can be an empty list if all argument
  --   values are supplied in the default text format, a singleton list to specify the
  --   same explicit transfer format for all arguments, or else it must specify precisely
  --   one format for each of the argument values in @avs@.
  FunctionCall {
    functionCall'ObjectID :: !ObjectID, -- ^ object ID of the stored procedure being invoked
    functionCall'ArgumentFormats :: [Format], -- ^ list of argument formats
    functionCall'ArgumentValues :: [Maybe LazyByteString], -- ^ list of argument values
    functionCall'ResultFormat :: !Format -- ^ result format
  } |

  -- | A message of the form “@'Parse' s q pts@” requests creation of a new prepared statement
  --   object with the name @s@ in the current session from the SQL command @q@.
  --   The statement name can be set to 'Data.ByteString.empty' to create the default unnamed
  --   statement. The list @pts@ specifies object IDs of PostgreSQL types for any query
  --   parameters appearing in @q@. It is not required to specify types for all query
  --   parameters and may even be left empty if not required; the types of any parameters
  --   omitted from @pts@ are then inferred directly from the query string @q@ itself.
  Parse {
    parse'Statement :: Name, -- ^ name of the statement to prepare
    parse'Query :: LazyByteString, -- ^ SQL query string
    parse'ParameterTypes :: [ObjectID] -- ^ parameter data types
  } |

  -- | A message of the form “@'Query' q@” requests a streamlined processing of the SQL
  --   command @q@, which should be parsed, bound, executed and eventually closed by
  --   the backend without further intervention by the frontend. The backend is allowed
  --   to implement this interface using the default unnamed session statement and portal,
  --   thus overwriting any such statements created in the current session explicitly.
  Query {
    query'String :: LazyByteString
  } |

  -- | Requests synchronisation point after a failed query in the backend.
  --   After receiving a 'Sync' message, the backend should exit error recovery
  --   mode and prepare itself to receive the next valid query from the frontend.
  Sync |

  -- | Requests graceful termination of a communication session. After transmitting
  --   a 'Terminate' message, the frontend should refrain from sending any further
  --   messages to the backend and immediately close the connection socket.
  Terminate

  deriving (Eq, Ord, Show)


-- * Backend Messages

-- | The type of messages sent by backend to a PostgreSQL frontend or client.
--   These are the messages tagged with ‘@B@’ in Chapter 49 of PostgreSQL documentation.
data BackendMessage =

  -- | Sent by a backend in response to a 'StartupMessage' with details of any
  --   authentication requirements imposed on the frontend. In Chapter 49 of
  --   PostgreSQL manual, this is documented as an array of individual messages,
  --   but in the Haskell implementation we combine them into a single
  --   'AuthenticationMessage' constructor to simplify processing.
  AuthenticationRequest {
    authenticationRequest'Message :: AuthenticationRequestMessage -- ^ actual authentication request data
  } |

  -- | A message of the form “@'BackendKeyData' pid k@” is sent by the backend
  --   as part of the session establishment protocol, providing the frontend
  --   process with the backend process ID @pid@ and secret @k@ required of
  --   the frontend to issue query cancellation requests (see: 'CancelRequest'
  --   message type above.)
  BackendKeyData {
    backendKeyData'Process :: !ProcessID, -- ^ backend process ID
    backendKeyData'Secret :: !Word32 -- ^ secret used to authenticate future 'CancelRequest' messages
  } |

  -- | Sent by the backend to indicate successful completion of a 'Bind' request.
  BindComplete |

  -- | Sent by the backend to indicate successful completion of a 'Close' request.
  CloseComplete |

  -- | A message of the form “@'CommandComplete' t@” is sent by the backend
  --   to indicate successful completion of a 'Query' or 'Execute'  request,
  --   after any query results have been returned through an appropriate
  --   number of 'DataRow' messages.
  --
  --   The tag @t@ is usually a terse but human-readable string describing the nature
  --   of the operation performed and the number of result rows affected:
  --
  --   * For single-row @INSERT@ commands into a table with row-level object identifiers (OIDs),
  --     the tag has the form “@INSERT /oid/ 1@”, where @/oid/@ is the object ID of the inserted row.
  --   * For all other @INSERT@ commands, the tag has the form “@INSERT 0 /n/@”, where @/n/@ is
  --     the number of rows inserted by the query.
  --   * For @DELETE@ commands, the tag has the form “@DELETE /n/@”, where @/n/@ is the number of rows deleted.
  --   * For @UPDATE@ commands, the tag has the form “@UPDATE /n/@”, where @/n/@ is the number of rows updated.
  --   * For @SELECT@ and @CREATE TABLE AS@ commands, the tag has the form “@SELECT /n/@”, where @/n/@ is the number of rows retrieved.
  --   * For @MOVE@ commands, the tag has the form “@MOVE /n/@”, where @/n/@ is the number of rows by which the cursor's position has been changed.
  --   * For @FETCH@ commands, the tag has the form “@FETCH /n/@”, where @/n/@ is the number of rows that have been retrieved from the cursor.
  --   * For @COPY@ commands, the tag has the form “@COPY /n/@”, where @/n/@ is the number of rows copied,
  --     or “@COPY@” (without the row count) in version of the PostgreSQL server prior to 8.2.
  CommandComplete {
    commandComplete'Result :: LazyByteString -- ^ result tag
  } |

  -- | Transmits a chunk of a @COPY@ data string from the backend to the frontend.
  --   The actual format of the stream data is determined by the user as part of the
  --   requesting @COPY@ command and communicated by the backend back to the frontend
  --   in the 'CopyInResponse', 'CopyOutResponse' or 'CopyBothResponse' message that
  --   heralds commencement of the @COPY@ subprotocol session.
  --
  --   By convention, backends are expected to send complete data rows in a 'CopyOutData'
  --   message, but frontends are allowed to divide stream data into chunks arbitrarily
  --   without regard of data row boundaries.
  CopyOutData {
    copyOutData'Payload :: LazyByteString -- ^ chunk of data transmitted in this message
  } |

  -- | Sent after the final 'CopyOutData' message of a given @COPY@ subprotocol session,
  --   indicates successful completion of an entire @COPY@ data stream.
  CopyOutDone |

  -- | A message of the form “@'CopyInResponse' f fs@” is sent by the backend to initiate
  --   an inbound @COPY@ subprotocol session with the frontend. The frontend should
  --   respond with zero or more 'CopyInData' messages followed by a 'CopyInDone',
  --   or, if it is not prepared to do so, send a 'CopyInFail' message back to the server.
  --
  --   The /stream format/ parameter @f@ defines the overall format of the data stream
  --   requested by the backend, while the list @fs@ defines the transfer formats of
  --   the individual data fields in each row, and must always be set to 'TextFormat'
  --   if the overal format of the stream @f@ is set to 'TextStreamFormat'.
  CopyInResponse {
    copyInResponse'StreamFormat :: !StreamFormat, -- ^ overall stream format
    copyInResponse'FieldFormats :: [Format] -- ^ list of field formats
  } |

  -- | A message of the form “@'CopyOutResponse' f fs@” is sent by the backend to initiate
  --   an outbound @COPY@ subprotocol session with the frontend. It should be followed
  --   immediately by zero or more 'CopyOutData' messages and completed with 'CopyOutDone'.
  --
  --   The /stream format/ parameter @f@ defines the overall format of the data stream
  --   requested by the backend, while the list @fs@ defines the transfer formats of
  --   the individual data fields in each row, and must always be set to 'TextFormat'
  --   if the overal format of the stream @f@ is set to 'TextStreamFormat'.
  CopyOutResponse {
    copyOutResponse'StreamFormat :: !StreamFormat, -- ^ overall stream format
    copyOutResponse'FieldFormats :: [Format] -- ^ list of field formats
  } |

  -- | A message of the form “@'CopyOutResponse' f fs@” is sent by the backend to initiate
  --   a bidirectional @COPY@ subprotocol session, used only for streaming replication.
  --
  --   The /stream format/ parameter @f@ defines the overall format of the data stream
  --   requested by the backend, while the list @fs@ defines the transfer formats of
  --   the individual data fields in each row, and must always be set to 'TextFormat'
  --   if the overal format of the stream @f@ is set to 'TextStreamFormat'.
  CopyBothResponse {
    copyBothResponse'StreamFormat :: !StreamFormat, -- ^ overall stream format
    copyBothResponse'FieldFormats :: [Format] -- ^ list of field formats
  } |

  -- | Sent by the backend with a list of column or field values returned from a data set
  --   returning SQL query such as @SELECT@ or @FETCH@.
  DataRow {
    dataRow'Values :: [Maybe LazyByteString] -- ^ list of field values
  } |

  -- | Sent by the backend in lieu of the 'CommandComplete' message as a response to
  --   an attempt to execute an empty query string.
  EmptyQueryResponse |

  -- | Sent by the backend to indicate an error condition, with details of the error
  --   communicated through a list of tagged /notice fields/ as described in the
  --   definition of the 'NoticeFieldTag'.
  ErrorResponse {
    errorResponse'Fields :: [(NoticeFieldTag, LazyByteString)] -- ^ list of notice fields
  } |

  -- | Sent by the backend to indicate successful completion of a 'FunctionCall'
  --   operation, with the sole value returned by the function call (possibly @NULL@.)
  FunctionCallResponse {
    functionCallResponse'Value :: Maybe LazyByteString -- ^ the value returned by the function call
  } |

  -- | A message of the form “@'NegotiateProtocolVersion' v os@” is sent by the backend
  --   as part of the session establishment protocol to indicate that the server does not support
  --   the minor protocol version requested by the client, but does support an earlier version @v@ of
  --   the protocol, or if the client requested unsupported protocol options @os@ in 'StartupMessage'.
  --   This message will be followed by an 'ErrorResponse' or a message indicating the success
  --   or failure of authentication.
  NegotiateProtocolVersion {
    negotiateProtocolVersion'MinorVersion :: !Word32, -- ^ latest minor protocol version supported by the server
    negotiateProtocolVersion'UnrecognisedOptions :: [Name] -- ^ list of unrecognised options requested by the client
  } |

  -- | Sent by the backend in lieu of the 'RowDescription' message, in response
  --   to a 'Describe' message for a statement or portal which represents an SQL
  --   command such as @CREATE@ or @INSERT@ that does not return a row set.
  NoData |

  -- | Sent by the backend to inform the frontend of a condition such as a warning
  --   or administrator action that may, or may be relevant to an operation currently
  --   in progress and may be issued asynchronously to any other message exchanges.
  --   Frontends must be prepared to accept such messages from the backend at any
  --   time after the initial 'StartupMessage' of a communication session.
  NoticeResponse {
    noticeResponse'Fields :: [(NoticeFieldTag, LazyByteString)] -- ^ list of notice fields
  } |

  -- | A message of the form “@'NotificationResponse' pid c x@” is sent by the backend
  --   to inform the frontend of a @NOTIFY@ event issued by the backend process @pid@,
  --   on the channel @c@ with a payload @x@. Frontends must be prepared to accept
  --   such messages from the backend at any time after the initial 'StartupMessage'
  --   of a communication session, irrespective of any other message exchanges being
  --   conducted.
  NotificationResponse {
    notificationResponse'Process :: !ProcessID, -- ^ backend process ID
    notificationResponse'Channel :: Name, -- ^ channel name
    notificationResponse'Payload :: LazyByteString -- ^ notification payload
  } |

  -- | Sent by the backend in response to a statement variant of a 'Describe' message,
  --   with object IDs of the types of all parameters required by the statement.
  ParameterDescription {
    parameterDescription'Types :: [ObjectID] -- ^ object IDs of the parameters' data types
  } |

  -- | A message of the form “@'ParameterStatus' p x@” is sent by the backend whenever
  --   of the “significant” session parameters is changed, either explicitly by the
  --   user with the SQL @SET@ comand, or as a result of administrator action.
  --   Frontends must be prepared to accept such messages from the backend at any
  --   time after the initial 'StartupMessage' of a communication session,
  --   irrespective of any other message exchanges being conducted.
  --
  --   What constitutes a “significant” parameter is currently left unspecified in
  --   PostgreSQL documentation, and may even become configurable in future server
  --   versions. At present time, these messages are issued for changes of the
  --   following parametes: @server_version@, @server_encoding@, @client_encoding@,
  --   @application_name@, @is_superuser@, @session_authorization@, @DateStyle@,
  --   @IntervalStyle@, @TimeZone@, @integer_datetimes@ and @standard_conforming_strings@.
  ParameterStatus {
    parameterStatus'Parameter :: Name, -- ^ parameter name
    parameterStatus'Value :: LazyByteString -- ^ new parameter value
  } |

  -- | Sent by the backend in response to a successful completion of a 'Parse' operation.
  ParseComplete |

  -- | Sent by the backend after the maximum number of 'DataRow' messages requested by
  --   an 'Execute' operation has been reached without exhausting the entire result set.
  PortalSuspended |

  -- | Sent by the backend as a synchronization point, indicating readiness to process
  --   a new SQL command, carrying with it the status of the current transaction (if any.)
  ReadyForQuery {
    readyForQuery'Status :: !TransactionStatus -- ^ current transaction status
  } |

  -- | Sent by the backend at the beginning of a result set as part of a simple or extended
  --   query protocol, or in response to a 'Describe' message referring to an SQL command
  --   that returns a row set.
  RowDescription {
    rowDescription'Fields :: [FieldDescription] -- ^ list of field descriptions
  }

  deriving (Eq, Ord, Show)


-- * Authentication Responses

-- | Details of a backend response to a frontend's authentication request
--   depicted by a session's 'StartupMessage'.
data AuthenticationRequestMessage =

  -- | Issued by the backend to signify successful authentication of the frontend's credentials.
  AuthenticationOk |

  -- | Issued by the backend to initiate Kerberos V5 authentication dialogue,
  --   described separately in Kerberos specification. This authentication method
  --   is no longer supported by recent versions of PostgreSQL software.
  AuthenticationKerberosV5 |

  -- | Issued by the backend to request clear-text password authentication.
  --   The frontend should respond with a 'PasswordMessage' containing an unencrypted
  --   text of the user's password.
  AuthenticationCleartextPassword |

  -- | A message of the form “@AuthenticationMD5Password s@” is issued by the backend
  --   to request MD5-based password authentication with the specified 32-bit /salt/ @s@.
  --   The frontend should respond with a 'PasswordMessage x', in which @x@ is a byte string
  --   derived from the user's login name @u@, password @p@ and the supplied salt @ss@ as follows:
  --
  -- @
  --      "md5" <> md5 (md5 (/p/ <> /u/) <> /ss/
  -- @
  --
  --   where /s/ is a 4-byte byte string obtained from the big-endian encoding of the supplied
  --   salt @s@, and @md5(x)@ is a function that returns a 32-byte bytestring obtained from the
  --   lowercase hexadecimal encoding of the MD5 signature of @x@.
  AuthenticationMD5Password {
    authenticationMD5Password'salt :: !Word32
  } |

  -- | Issued by the backend to request SCM credential authentication, possible only on
  --   connections over local Unix-domain sockets on platforms that support SCM credential
  --   messages. The frontend must issue an SCM credential message and then send a single
  --   data byte. The contents of the data byte are uninteresting; it's only used to ensure
  --   that the server waits long enough to receive the credential message. If the credential
  --   is acceptable, the server responds with an 'AuthenticationOk', otherwise it responds
  --   with an 'ErrorResponse'. This message type is only issued by versions of PostgreSQL
  --   servers earlier than 9.1 and may eventually be removed from the protocol specification.
  AuthenticationSCMCredential |

  -- | Issued by the backend to request GSS credential authentication. The frontend should respond
  --   by initiating a GSSAPI negotiation, sending a 'PasswordMessage' with the first part of the
  --   GSSAPI data stream. If further messages are needed, the server will respond with an
  --   'AuthenticationGSSContinue' message.
  AuthenticationGSS |

  -- | Issued by the backend to request SSPI credential authentication. The frontend should respond
  --   by initiating a SSPI negotiation, sending a 'PasswordMessage' with the first part of the
  --   SSPI data stream. If further messages are needed, the server will respond with an
  --   'AuthenticationGSSContinue' message.
  AuthenticationSSPI |

  -- | Issued by the backend as a response to the previous step of GSSAPI or SSPI negotiation,
  --   i.e., an 'AuthenticationGSS', 'AuthenticationSSPI' or an earlier 'AuthenticationGSSContinue'
  --   message. If the GSSAPI or SSPI data in this message indicates more data is needed to complete
  --   the authentication, the frontend must send that data as another 'PasswordMessage'.
  --   If GSSAPI or SSPI authentication is completed by this message, the server will eventually
  --   send 'AuthenticationOk' to indicate successful authentication or 'ErrorResponse' to indicate
  --   failure.
  AuthenticationGSSContinue LazyByteString |

  -- | Issued by the backend to request SASL credential authentication.
  AuthenticationSASL [ByteString] |

  -- | Issued by the backend as part of SASL authentication protocol.
  AuthenticationSASLContinue LazyByteString |

  -- | Issued by the backend as part of SASL authentication protocol.
  AuthenticationSASLFinal LazyByteString |

  -- | A message of the form “@AuthenticationMiscellaneous t x@” is used to encode possible future
  --   authentication methods that are not recognized by the current version of the library.
  --   The 32-bit tag @t@ describes the authentication method requested and @x@ described any
  --   authentication parameters (possibly 'Data.ByteString.Lazy.null'), in the method-specific
  --   format. The only sensible response to this message is to abandon the conection after
  --   issuing an appropriate notification message to the user.
  AuthenticationMiscellaneous !Word32 LazyByteString

  deriving (Eq, Ord, Show)


-- * Field Descriptions

-- | A data type used to describe a single result field in a 'RowDescription' message.
data FieldDescription = FieldDescription {
  fieldDescription'Name         :: Name,      -- ^ the field's name
  fieldDescription'Table        :: !ObjectID, -- ^ if the field can be identified as a column of a specific table, the object ID of the table; otherwise zero
  fieldDescription'Column       :: !Int16,    -- ^ ff the field can be identified as a column of a specific table, the attribute number of the column; otherwise zero
  fieldDescription'Type         :: !ObjectID, -- ^ the object ID of the field's data type
  fieldDescription'TypeSize     :: !Int16,    -- ^ the data type size, negative for fields of a variable-width type
  fieldDescription'TypeModifier :: !Word32,   -- ^ the type modifier, with semantics defined individually for each data type
  fieldDescription'Format       :: !Format    -- ^ the format code used by the field; in a 'RowDescription' message returned from the statement variant of 'Describe',
                                              --   the format code is not yet known and will always be set to the default value of 'TextFormat'
} deriving (Eq, Ord, Read, Show)


-- * Data Transmission Formats

-- | Haskell type used to describe encoding formats of query parameters and result
--   data values. At the moment, PostgreSQL defines two: the default text format
--   'TextFormat' (@0@) and the somewhat poorly-documented binary format
--   'BinaryFormat (@1@).
type Format = Word16

-- | (@0@) Data exchanged in the default SQL text format similar to that defined by
--   SQL for string constants, but without the surrounding quotes or quote escaping.
pattern TextFormat :: Format
pattern TextFormat = 0

-- | (@1@) Data exchanged in the somewhat underdocumented PostgreSQL binary format.
--   This should probably be only used for a handful of simple types such as
--   fixed-width integers that have a well-documented binary format, and types
--   such as timestamps and floating point numbers for which the use of text
--   format could result in loss of precision. Details of the known binary
--   formats are described separately in "Database.PostgreSQL.Protocol.Binary".
pattern BinaryFormat :: Format
pattern BinaryFormat = 1

-- | Haskell type used to describe encoding format of data streams exchanged using
--   the @COPY@ subprotocol. At the moment, PostgreSQL defines two: the default
--   'TextStreamFormat' (@0@) and a more compact 'BinaryStreamFormat' (@1@).
type StreamFormat = Word8

-- | (@0@) Data streamed in the default text format, in which rows are separated
--   by newlines and columns are separated by the delimiter character configured
--   as part of the @COPY@ command.
pattern TextStreamFormat :: StreamFormat
pattern TextStreamFormat = 0

-- | (@1@) Data streamed in a compact binary format described in the PostgreSQL
--   documentation of the @COPY@ command.
pattern BinaryStreamFormat :: StreamFormat
pattern BinaryStreamFormat = 1


-- * Session Objects

-- | A type used to select the exact namespace of session object names in
--   'Close' and 'Describe' messages; must be either 'Statement' or 'Portal'.
type SessionObjectType = Word8

-- | (‘@S@’) The corresponding name refers to a prepared statement.
pattern Statement :: SessionObjectType
pattern Statement = 0x53 -- 'S'

-- | (‘@P@’) The corresponding name refers to a bound portal.
pattern Portal :: SessionObjectType
pattern Portal = 0x50 -- 'P'


-- * Transaction Status Codes

-- | Transaction status codes returned in 'ReadyForQuery' messages.
type TransactionStatus = Word8

-- | (‘@I@’) Transaction status code returned to indicate that the backend process is “idle”, i.e., outside of a transaction block.
pattern TransactionIdle :: TransactionStatus
pattern TransactionIdle = 0x49 -- 'I'

-- | (‘@T@’) Transaction status code returned to indicate that the backend process is currently operating within a transaction block.
pattern TransactionInProgress :: TransactionStatus
pattern TransactionInProgress = 0x54 -- 'T'

-- | (‘@E@’) Transaction status code returned to indicate that the backend process is currently operating in a “transaction recovery” mode
--   after encoutering an error within a transaction block. All further SQL requests will be rejected until the block is completed with
--   an SQL @ROLLBACK@ command.
pattern TransactionFailed :: TransactionStatus
pattern TransactionFailed = 0x45 -- 'E'


-- * Notice Fields
--
-- | When issuing a notice or an error response, a backend may describe
--   various aspects of the underlying condition through a series of
--   /notice fields/, each tagged with a byte describing the field's
--   semantics, such as severity of the condition, associated database
--   object or a human-readable error message.
--
--   The 'NoticeSeverity', 'NoticeCode' and 'NoticeMessage' fields
--   must always be present in every notice and error response message,
--   but all other tags may be included or omitted freely at the backend's
--   discretion. A given tag may appear at most once in a single notice.
--
--   The client is responsible for formatting displayed information to meet its needs;
--   in particular it should break long lines as needed. Newline characters appearing
--   in the error message fields should be treated as paragraph breaks, not line breaks.
--
--   __Note:__ The 'NoticeSchema', 'NoticeTable', 'NoticeColumn', 'NoticeDataType'
--   and 'NoticeConstraint' fields  are supplied only for a limited number of error
--   types and frontends should not assume that the presence of any of these fields
--   guarantees the presence of another field. Core error sources observe the
--   interrelationships noted below, but user-defined functions may use these fields
--   in other ways. In the same vein, frontends should not assume that these fields
--   denote contemporary objects in the current database.

-- | Notice field tags are represented by single-bytes, usually assigned helpful ASCII values.
type NoticeFieldTag = Word8

-- | (‘@S@’) Indicates that the field describes severity of the condition.
--   The field itself must be set to one of @ERROR@, @FATAL@ or @PANIC@ for
--   'ErrorResponse' messages, or @WARNING@, @NOTICE@, @DEBUG@, @INFO@, or @LOG@
--   in a notice message. It may also be set to localized translation of one of these.
--   This field must always be present in every notice and error message.
pattern NoticeSeverity :: NoticeFieldTag
pattern NoticeSeverity = 0x53 -- 'S'

-- | (‘@V@’) Indicates that the field describes severity of the condition.
--   The field itself must be set to one of @ERROR@, @FATAL@ or @PANIC@ for
--   'ErrorResponse' messages, or @WARNING@, @NOTICE@, @DEBUG@, @INFO@, or @LOG@
--   in a notice message. This field is identical to 'NoticeSeverity' except that
--   its value is never localised. It is only generated by PostgreSQL versions 9.6
--   and later.
pattern NoticeSeverityCode :: NoticeFieldTag
pattern NoticeSeverityCode = 0x56 -- 'V'

-- | (‘@C@’) Indicates that the field describes the SQLSTATE code for the error.
--   These codes are not localisable and the field must be present in every notice
--   and error message.
pattern NoticeCode :: NoticeFieldTag
pattern NoticeCode = 0x43 -- 'C'

-- | (‘@M@’) The primary human-readable error message.
--   It should be an accurate but terse (typically one line) statement of the underlying
--   condition. This field should be present in every notice and error message.
pattern NoticeMessage :: NoticeFieldTag
pattern NoticeMessage = 0x4D -- 'M'

-- | (‘@D@’) An optional secondary error message carrying more detail about the problem.
--   may contain newline characters, which should, however, be interpreted as paragraph
--   rather than line breaks, so that user interfaces should feel free to wrap long
--   descriptions to their display width as appropriate.
pattern NoticeDetail :: NoticeFieldTag
pattern NoticeDetail = 0x44 -- 'D'

-- | (‘@H@’) An optional suggestion what to do about the problem.
--   This is intended to differ from 'NoticeDetail' in that it offers advice (potentially inappropriate)
--   rather than hard facts. Like 'NoticeDetail', the field's value may contain newline characters,
--   which should, be interpreted as paragraph rather than line breaks, with long hints wrapped
--   to the user interface's display width as appropriate.
pattern NoticeHint :: NoticeFieldTag
pattern NoticeHint = 0x48 -- 'H'

-- | (‘@P@’) A decimal ASCII integer indicating a character (not byte) index into the query string
--   at which the error has been detected. The first character of the query is taken to be located
--   at postion “@1@”.
pattern NoticePosition :: NoticeFieldTag
pattern NoticePosition = 0x50 -- 'P'

-- | (‘@p@’) A decimal ASCII integer indicating a character (not byte) index into an internally-generated
--   query string at which the error has been detected. The first character of the query is taken to be located
--   at postion “@1@”. This is the same as 'NoticePosition' but included for internally-generated
--   queries, whose values will always be provided separated in the 'NoticeInternalQuery' field.
pattern NoticeInternalPosition :: NoticeFieldTag
pattern NoticeInternalPosition = 0x70 -- 'p'

-- | (‘@q@’) The text of a failed internally-generated SQL command.
--   This could be, for example, a SQL query issued by a PL/pgSQL function.
pattern NoticeInternalQuery :: NoticeFieldTag
pattern NoticeInternalQuery = 0x71 -- 'q'

-- | (‘@W@’) An indication of the context in which the error occurred.
--   Presently this includes a call stack traceback of active procedural language functions
--   and internally-generated queries. The trace is one entry per line, most recent first.
pattern NoticeContext :: NoticeFieldTag
pattern NoticeContext = 0x57 -- 'W'

-- | (‘@s@’) If the error was associated with a specific database object,
---  the name of the schema containing that object, if any.
pattern NoticeSchema :: NoticeFieldTag
pattern NoticeSchema = 0x73 -- 's'

-- | (‘@t@’) If the error was associated with a specific table, the name of the table
--   within the schema specified separately by the 'NoticeSchema' field.
pattern NoticeTable :: NoticeFieldTag
pattern NoticeTable = 0x74 -- 't'

-- | (‘@c@’) If the error was associated with a specific table column, the name of the column
--   within the table specified separately by the 'NoticeTable' and 'NoticeSchema' fields.
pattern NoticeColumn :: NoticeFieldTag
pattern NoticeColumn = 0x63 -- 'c'

-- | (‘@d@’) If the error was associated with a specific data type, the name of the data type
--   within the schema specified separately by the 'NoticeSchema' field.
pattern NoticeDataType :: NoticeFieldTag
pattern NoticeDataType = 0x64 -- 'd'

-- | (‘@n@’) If the error was associated with a specific constraint, the name of the constraint or index
--   on the database object specified separately by the 'NoticeSchema', 'NoticeTable', 'NoticeColumn'
--   and/or 'NoticeDataType' fields.
pattern NoticeConstraint :: NoticeFieldTag
pattern NoticeConstraint = 0x6E -- 'n'

-- | (‘@F@’) The file name of the source-code location where the error was reported.
pattern NoticeFile :: NoticeFieldTag
pattern NoticeFile = 0x46 -- 'F'

-- | (‘@L@’) The line number of the source-code location where the error was reported.
pattern NoticeLine :: NoticeFieldTag
pattern NoticeLine = 0x4C -- 'L'

-- | (‘@R@’) The name of the source-code routine reporting the error.
pattern NoticeRoutine :: NoticeFieldTag
pattern NoticeRoutine = 0x52 -- 'R'


-- * Miscellaneous Type Aliases

-- | Type used to identify PostgreSQL database objects.
type ObjectID = Word32

-- | Type used to identify PostgreSQL backend processes.
type ProcessID = Word32

-- | Entity names are represented by strict byte strings.
type Name = ByteString

-- | A better, explicit name for the lazy 'LazyByteString.ByteString' type
--   from "Data.ByteString.Lazy".
type LazyByteString = LazyByteString.ByteString
